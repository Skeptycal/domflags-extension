// Generated by CoffeeScript 1.7.1
(function() {
  var ports, requestDomFlags, trackEvent, updateContextMenus, _gaq,
    __hasProp = {}.hasOwnProperty;

  _gaq = _gaq || [];

  _gaq.push(["_setAccount", "UA-48965633-1"]);

  _gaq.push(["_trackPageview"]);

  (function() {
    var ga, s;
    ga = document.createElement("script");
    ga.type = "text/javascript";
    ga.async = true;
    ga.src = "https://ssl.google-analytics.com/ga.js";
    s = document.getElementsByTagName("script")[0];
    return s.parentNode.insertBefore(ga, s);
  })();

  trackEvent = function() {
    return _gaq.push(['_trackEvent', 'Domflag', 'clicked']);
  };

  updateContextMenus = function(flags, port) {
    var key, onClickHandler, value, _results;
    onClickHandler = function(info, tab) {
      return port.postMessage({
        name: "contextMenuClick",
        key: info.menuItemId,
        tab: tab
      });
    };
    if (flags.length > 0) {
      _results = [];
      for (key in flags) {
        if (!__hasProp.call(flags, key)) continue;
        value = flags[key];
        _results.push(chrome.contextMenus.create({
          title: value,
          id: "" + key,
          contexts: ['all'],
          onclick: onClickHandler
        }));
      }
      return _results;
    }
  };

  requestDomFlags = function(message, tabId, port) {
    return chrome.tabs.sendMessage(tabId, message, function(response) {
      if (response) {
        return updateContextMenus(response.flags, port);
      }
    });
  };

  ports = [];

  chrome.runtime.onConnect.addListener(function(port) {
    if (port.name !== "devtools") {
      return false;
    }
    chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var contentScript, tabChange, tabId, tabPort;
      tabId = tabs[0].id;
      ports[tabId] = {
        port: port,
        portId: port.portId_,
        tab: tabId
      };
      tabPort = ports[tabId].port;
      tabChange = function(activeInfo) {
        chrome.contextMenus.removeAll();
        if (activeInfo.tabId === tabId) {
          return requestDomFlags("Tab change", tabId, tabPort);
        }
      };
      chrome.storage.sync.get({
        autoInspectOpen: true
      }, function(items) {
        if (items.autoInspectOpen) {
          return port.postMessage({
            name: 'devtoolsOpened',
            key: 0
          });
        }
      });
      contentScript = function(message, sender, sendResponse) {
        if (sender.tab.id !== tabId) {
          return;
        }
        if (message.name === 'panelClick') {
          port.postMessage({
            name: message.name,
            key: message.key
          });
          return trackEvent();
        } else if (message.name === 'pageReloaded') {
          chrome.tabs.insertCSS(tabId, {
            file: "src/inject/inject.css"
          }, function() {
            return requestDomFlags("Give me domflags", tabId, tabPort);
          });
          return chrome.storage.sync.get({
            autoInspectReload: true
          }, function(items) {
            if (items.autoInspectReload) {
              return port.postMessage({
                name: message.name,
                key: 0
              });
            }
          });
        }
      };
      chrome.tabs.onActivated.addListener(tabChange);
      chrome.runtime.onMessage.addListener(contentScript);
      return port.onDisconnect.addListener(function(port) {
        chrome.contextMenus.removeAll();
        chrome.runtime.onMessage.removeListener(contentScript);
        chrome.tabs.sendMessage(tabId, "Remove panel");
        chrome.tabs.onActivated.removeListener(tabChange);
        return delete ports[tabId];
      });
    });
    return port.onMessage.addListener(function(msg) {
      return chrome.tabs.query({
        currentWindow: true,
        active: true
      }, function(tabs) {
        var tabId, tabPort;
        tabId = tabs[0].id;
        tabPort = ports[tabId].port;
        chrome.contextMenus.removeAll();
        return requestDomFlags("Give me domflags", tabId, tabPort);
      });
    });
  });

  chrome.commands.onCommand.addListener(function(command) {
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var port, tabId;
      tabId = tabs[0].id;
      if (ports[tabId]) {
        port = ports[tabId].port;
        return port.postMessage({
          name: "keyboardShortcut",
          key: command
        });
      }
    });
  });

}).call(this);
