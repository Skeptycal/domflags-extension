// Generated by CoffeeScript 1.7.1
(function() {
  var ports, togglePanel, trackEvent, _gaq;

  _gaq = _gaq || [];

  _gaq.push(["_setAccount", "UA-48965633-1"]);

  _gaq.push(["_trackPageview"]);

  (function() {
    var ga, s;
    ga = document.createElement("script");
    ga.type = "text/javascript";
    ga.async = true;
    ga.src = "https://ssl.google-analytics.com/ga.js";
    s = document.getElementsByTagName("script")[0];
    return s.parentNode.insertBefore(ga, s);
  })();

  trackEvent = function() {
    return _gaq.push(['_trackEvent', 'Domflag', 'clicked']);
  };

  togglePanel = function(message, tabId, port) {
    return chrome.tabs.sendMessage(tabId, message, function(response) {});
  };

  ports = [];

  chrome.runtime.onConnect.addListener(function(port) {
    if (port.name !== "devtools") {
      return false;
    }
    chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var contentScript, pageReload, tabId, tabPort;
      tabId = tabs[0].id;
      ports[tabId] = {
        port: port,
        portId: port.portId_,
        tab: tabId
      };
      tabPort = ports[tabId].port;
      chrome.storage.sync.get({
        autoInspectOpen: true
      }, function(items) {
        if (items.autoInspectOpen) {
          return port.postMessage({
            name: 'devtoolsOpened',
            key: 0
          });
        }
      });
      contentScript = function(message, sender, sendResponse) {
        if (sender.tab.id !== tabId) {
          return;
        }
        if (message.name === 'panelClick') {
          port.postMessage({
            name: message.name,
            key: message.key
          });
          trackEvent();
        }
      };
      pageReload = function(tabId, changeInfo, tab) {
        if (ports[tabId] == null) {
          return;
        }
        if (changeInfo.status === 'complete') {
          togglePanel("create", tabId, tabPort);
          return chrome.storage.sync.get({
            autoInspectReload: true
          }, function(items) {
            if (items.autoInspectReload) {
              return port.postMessage({
                name: "pageReloaded",
                key: 0
              });
            }
          });
        }
      };
      chrome.runtime.onMessage.addListener(contentScript);
      chrome.tabs.onUpdated.addListener(pageReload);
      return port.onDisconnect.addListener(function(port) {
        chrome.runtime.onMessage.removeListener(contentScript);
        chrome.tabs.onUpdated.removeListener(pageReload);
        togglePanel("remove", tabId, tabPort);
        return delete ports[tabId];
      });
    });
    return port.onMessage.addListener(function(msg) {
      return chrome.tabs.query({
        currentWindow: true,
        active: true
      }, function(tabs) {
        var tabId, tabPort;
        tabId = tabs[0].id;
        tabPort = ports[tabId].port;
        return togglePanel("create", tabId, tabPort);
      });
    });
  });

  chrome.commands.onCommand.addListener(function(command) {
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var port, tabId;
      tabId = tabs[0].id;
      if (ports[tabId]) {
        port = ports[tabId].port;
        if (command === "toggle_domflag") {
          return port.postMessage({
            name: "getInspectedEl"
          });
        } else {
          return port.postMessage({
            name: "keyboardShortcut",
            key: command
          });
        }
      }
    });
  });

}).call(this);
