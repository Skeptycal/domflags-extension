// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  this.toggleDomflag = function(el) {
    if (el.hasAttribute('domflag')) {
      return el.removeAttribute('domflag', '');
    } else {
      return el.setAttribute('domflag', '');
    }
  };

  $(document).ready(function() {
    var WatchDOMFlags, domflags;
    WatchDOMFlags = (function() {
      function WatchDOMFlags(domflags) {
        this.domflags = domflags;
        this.domflagsPanel = $('#domflags-panel');
        this.panelList = void 0;
        this.flaggedElements = [];
        this.constructFlagEls();
        this.setupDomObserver();
      }

      WatchDOMFlags.prototype.constructFlagEls = function() {
        var elString, key, _ref;
        if (this.domflags.length > 0) {
          _ref = this.domflags;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            if ($.isNumeric(key)) {
              elString = this.elToString(this.domflags[key]);
              this.flaggedElements.push(elString);
            }
          }
          return this.backgroundListener();
        }
      };

      WatchDOMFlags.prototype.backgroundListener = function() {
        this.pageReloaded();
        if (!this.domflagsPanel.is(":visible")) {
          return chrome.runtime.onMessage.addListener((function(_this) {
            return function(message, sender, sendResponse) {
              if (message === "remove") {
                return _this.domflagsPanel.remove();
              } else if (message === "create") {
                sendResponse({
                  flags: _this.flaggedElements
                });
                return _this.createDomflagsPanel();
              }
            };
          })(this));
        }
      };

      WatchDOMFlags.prototype.pageReloaded = function() {
        return chrome.runtime.sendMessage({
          name: "pageReloaded"
        });
      };

      WatchDOMFlags.prototype.createDomflagsPanel = function() {
        var el, elements, key, value, _ref;
        if (!this.domflagsPanel.is(":visible")) {
          this.appendDomflagsPanel();
        }
        elements = "";
        _ref = this.flaggedElements;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          if ($.isNumeric(key)) {
            el = "<domflags-li class='domflags-li' data-key='" + key + "'>" + value + "</domflags-li>";
            elements = "" + elements + " " + el;
          }
        }
        return this.panelList.append(elements);
      };

      WatchDOMFlags.prototype.appendDomflagsPanel = function() {
        var html;
        html = "<domflags-panel id=\"domflags-panel\" class=\"bottom left opened\">\n  <domflags-header class=\"domflags-header\">DOMFLAGS</domflags-header>\n  <domflags-button class=\"domflags-button right\"></domflags-button>\n  <domflags-ol class=\"domflags-ol\"></domflags-ol>\n</domflags-panel>";
        $(document.body).append(html);
        this.domflagsPanel = $('#domflags-panel');
        this.panelList = this.domflagsPanel.find('.domflags-ol');
        return this.setupDomPanelListeners();
      };

      WatchDOMFlags.prototype.setupDomPanelListeners = function() {
        return this.domflagsPanel.get(0).addEventListener('click', (function(_this) {
          return function(event) {
            var key, listHeight, oldPos, targetPos;
            if (event.target.className === 'domflags-li') {
              key = $(event.target).attr('data-key');
              return chrome.runtime.sendMessage({
                name: "panelClick",
                key: key
              });
            } else if (event.target.className === 'domflags-header') {
              if (_this.domflagsPanel.hasClass('opened')) {
                listHeight = _this.panelList.outerHeight() + 1;
                _this.domflagsPanel.removeClass('opened').addClass('closed');
                return _this.domflagsPanel.css('transform', "translateY(" + listHeight + "px)");
              } else if (_this.domflagsPanel.hasClass('closed')) {
                _this.domflagsPanel.removeClass('closed').addClass('opened');
                return _this.domflagsPanel.css('transform', "translateY(0px)");
              }
            } else if (event.target.classList[0] === 'domflags-button') {
              targetPos = event.target.classList[1];
              if (targetPos === "left") {
                oldPos = "right";
              } else if (targetPos === "right") {
                oldPos = "left";
              }
              _this.domflagsPanel.removeClass(oldPos).addClass(targetPos);
              return $(event.target).removeClass(targetPos).addClass(oldPos);
            }
          };
        })(this));
      };

      WatchDOMFlags.prototype.elToString = function(node) {
        var domArray, elString, key, value, _ref;
        domArray = [node.tagName];
        _ref = node.attributes;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          if (($.isNumeric(key)) && (value.name !== "domflag")) {
            domArray.push("" + value.name + "='" + value.value + "'");
          }
        }
        elString = domArray.join(' ');
        return elString;
      };

      WatchDOMFlags.prototype.refreshDomPanel = function() {
        $('.domflags-li').remove();
        this.flaggedElements = [];
        this.domflags = $('[domflag]');
        return this.constructFlagEls();
      };

      WatchDOMFlags.prototype.cacheDomflags = function() {
        return this.domflags = document.querySelectorAll('[domflag]');
      };

      WatchDOMFlags.prototype.addNodesToPanel = function(newNodes) {
        var el, elString, index, node, panelItems, _i, _len, _results;
        panelItems = document.getElementsByClassName('domflags-li');
        _results = [];
        for (_i = 0, _len = newNodes.length; _i < _len; _i++) {
          node = newNodes[_i];
          elString = this.elToString(node);
          if (node.hasAttribute('domflag')) {
            this.cacheDomflags();
            index = $(this.domflags).index(node);
            this.flaggedElements.splice(index, 0, elString);
            el = "<domflags-li class='domflags-li' data-key='" + index + "'>" + elString + "</domflags-li>";
            if (panelItems.length > 0) {
              if (index >= 1) {
                _results.push($(panelItems[index - 1]).after(el));
              } else {
                _results.push($(panelItems[0]).before(el));
              }
            } else {
              _results.push(this.panelList.append(el));
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      WatchDOMFlags.prototype.removeNodesFromPanel = function(deletedNodes) {
        var index, node, panelItems, _i, _len, _ref;
        panelItems = document.getElementsByClassName('domflags-li');
        _ref = deletedNodes.slice(0).reverse();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          index = $(this.domflags).index(node);
          this.flaggedElements.splice(index, 1);
          $(panelItems[index]).remove();
        }
        return this.cacheDomflags();
      };

      WatchDOMFlags.prototype.setupDomObserver = function() {
        var config, observer;
        observer = new MutationObserver((function(_this) {
          return function(mutations) {
            var deletedNodes, newNodes;
            newNodes = [];
            deletedNodes = [];
            mutations.forEach(function(mutation) {
              var addedNodes, childrenArray, item, key, node, nodeChange, removedNodes, value, _ref, _results;
              if (mutation.type === "childList") {
                addedNodes = {
                  mutation: mutation.addedNodes,
                  panelArray: newNodes
                };
                removedNodes = {
                  mutation: mutation.removedNodes,
                  panelArray: deletedNodes
                };
                nodeChange = (function() {
                  switch (false) {
                    case !(addedNodes.mutation.length > 0):
                      return addedNodes;
                    case !(removedNodes.mutation.length > 0):
                      return removedNodes;
                    default:
                      return void 0;
                  }
                })();
                if (nodeChange) {
                  _ref = nodeChange.mutation;
                  _results = [];
                  for (key in _ref) {
                    if (!__hasProp.call(_ref, key)) continue;
                    value = _ref[key];
                    node = nodeChange.mutation[key];
                    _results.push((function() {
                      var _ref1, _results1;
                      _ref1 = node.attributes;
                      _results1 = [];
                      for (key in _ref1) {
                        if (!__hasProp.call(_ref1, key)) continue;
                        value = _ref1[key];
                        if (value.name === "domflag") {
                          childrenArray = Array.prototype.slice.call(node.querySelectorAll("[domflag]"));
                          nodeChange.panelArray.push(node);
                          _results1.push((function() {
                            var _i, _len, _results2;
                            _results2 = [];
                            for (_i = 0, _len = childrenArray.length; _i < _len; _i++) {
                              item = childrenArray[_i];
                              _results2.push(nodeChange.panelArray.push(item));
                            }
                            return _results2;
                          })());
                        } else {
                          _results1.push(void 0);
                        }
                      }
                      return _results1;
                    })());
                  }
                  return _results;
                }
              } else if (mutation.type === "attributes") {
                if ((mutation.oldValue === "") || (mutation.oldValue === null)) {
                  if (mutation.target.hasAttribute('domflag')) {
                    return newNodes.push(mutation.target);
                  } else {
                    return deletedNodes.push(mutation.target);
                  }
                }
              }
            });
            _this.removeNodesFromPanel(deletedNodes);
            return _this.addNodesToPanel(newNodes);
          };
        })(this));
        config = {
          attributeFilter: ['domflag'],
          attributeOldValue: true,
          attributes: true,
          childList: true,
          subtree: true
        };
        return observer.observe(document.body, config);
      };

      return WatchDOMFlags;

    })();
    domflags = document.querySelectorAll('[domflag]');
    return new WatchDOMFlags(domflags);
  });

}).call(this);
