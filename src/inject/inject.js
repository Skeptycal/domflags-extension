// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  this.toggleDomflag = function(el) {
    if (el.hasAttribute('domflag')) {
      return el.removeAttribute('domflag', '');
    } else {
      return el.setAttribute('domflag', '');
    }
  };

  $(document).ready(function() {
    var WatchDOMFlags, domflags;
    WatchDOMFlags = (function() {
      function WatchDOMFlags(domflags) {
        this.domflags = domflags;
        this.domflagsPanel = void 0;
        this.panelList = void 0;
        this.shadowRoot = void 0;
        this.flagStrings = [];
        this.backgroundListener();
        this.setupDomObserver();
      }

      WatchDOMFlags.prototype.backgroundListener = function() {
        return chrome.runtime.onMessage.addListener((function(_this) {
          return function(message, sender, sendResponse) {
            if (message === "remove") {
              _this.domflagsPanel.remove();
              _this.domflagsPanel = _this.shadowRoot.getElementById('domflags-panel');
            }
            if (message === "create" && _this.domflags.length > 0) {
              return _this.addNodesToPanel(_this.domflags);
            }
          };
        })(this));
      };

      WatchDOMFlags.prototype.appendDomflagsPanel = function() {
        var cssPath, panelHTML, styleTag;
        cssPath = chrome.extension.getURL("src/inject/inject.css");
        styleTag = "<style type=\"text/css\" media=\"screen\">@import url(" + cssPath + ");</style>";
        panelHTML = "<domflags-panel id=\"domflags-panel\" class=\"bottom left opened\">\n  <domflags-header class=\"domflags-header\">DOMFLAGS</domflags-header>\n  <domflags-button class=\"domflags-button right\"></domflags-button>\n  <domflags-ol class=\"domflags-ol\"></domflags-ol>\n</domflags-panel>";
        if (document.getElementById('domflags-root') == null) {
          $(document.body).append('<domflags id="domflags-root"></domflags>');
          this.shadowRoot = document.querySelector('#domflags-root').createShadowRoot();
          this.shadowRoot.innerHTML = styleTag;
        }
        this.shadowRoot.innerHTML += panelHTML;
        this.domflagsPanel = this.shadowRoot.getElementById('domflags-panel');
        this.panelList = this.domflagsPanel.querySelector('.domflags-ol');
        return this.createPanelListeners();
      };

      WatchDOMFlags.prototype.createPanelListeners = function() {
        return this.domflagsPanel.addEventListener('click', (function(_this) {
          return function(event) {
            var key, listHeight, oldPos, targetPos;
            if (event.target.className === 'domflags-li') {
              key = $(event.target).attr('data-key');
              return chrome.runtime.sendMessage({
                name: "panelClick",
                key: key
              });
            } else if (event.target.className === 'domflags-header') {
              if (_this.domflagsPanel.classList.contains('opened')) {
                listHeight = $(_this.panelList).outerHeight() + 1;
                _this.domflagsPanel.classList.remove('opened');
                _this.domflagsPanel.classList.add('closed');
              } else if (_this.domflagsPanel.classList.contains('closed')) {
                listHeight = 0;
                _this.domflagsPanel.classList.remove('closed');
                _this.domflagsPanel.classList.add('opened');
              }
              return $(_this.domflagsPanel).css('transform', "translateY(" + listHeight + "px)");
            } else if (event.target.classList[0] === 'domflags-button') {
              targetPos = event.target.classList[1];
              if (targetPos === "left") {
                oldPos = "right";
              } else if (targetPos === "right") {
                oldPos = "left";
              }
              _this.domflagsPanel.classList.remove(oldPos);
              _this.domflagsPanel.classList.add(targetPos);
              event.target.classList.remove(targetPos);
              return event.target.classList.add(oldPos);
            }
          };
        })(this));
      };

      WatchDOMFlags.prototype.nodeListToArray = function(nodeList) {
        return Array.prototype.slice.call(nodeList);
      };

      WatchDOMFlags.prototype.elToString = function(node) {
        var className, idName, tagName;
        tagName = node.tagName.toLowerCase();
        idName = node.id ? "#" + node.id : "";
        className = node.className ? "." + node.className : "";
        return tagName + idName + className;
      };

      WatchDOMFlags.prototype.cacheDomflags = function() {
        return this.domflags = document.querySelectorAll('[domflag]');
      };

      WatchDOMFlags.prototype.calibrateIndexes = function() {
        var i, tag, tags, _i, _len, _results;
        tags = this.panelList.getElementsByTagName('domflags-li');
        _results = [];
        for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
          tag = tags[i];
          _results.push(tag.setAttribute('data-key', i));
        }
        return _results;
      };

      WatchDOMFlags.prototype.addNodesToPanel = function(newNodes) {
        var el, elString, index, node, panelItems, _i, _len;
        newNodes = this.nodeListToArray(newNodes);
        if (this.domflagsPanel == null) {
          this.appendDomflagsPanel();
        }
        panelItems = this.domflagsPanel.getElementsByClassName('domflags-li');
        for (_i = 0, _len = newNodes.length; _i < _len; _i++) {
          node = newNodes[_i];
          elString = this.elToString(node);
          if (node.hasAttribute('domflag')) {
            this.cacheDomflags();
            index = $(this.domflags).index(node);
            this.flagStrings.splice(index, 0, elString);
            el = "<domflags-li class='domflags-li' data-key='" + index + "'>" + elString + "</domflags-li>";
            if (panelItems.length > 0) {
              if (index >= 1) {
                $(panelItems[index - 1]).after(el);
              } else {
                $(panelItems[0]).before(el);
              }
            } else {
              this.panelList.innerHTML += el;
            }
          }
        }
        return this.calibrateIndexes();
      };

      WatchDOMFlags.prototype.removeNodesFromPanel = function(deletedNodes) {
        var index, node, panelItems, _i, _len, _ref;
        panelItems = this.domflagsPanel.getElementsByClassName('domflags-li');
        _ref = deletedNodes.slice(0).reverse();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          index = $(this.domflags).index(node);
          this.flagStrings.splice(index, 1);
          $(panelItems[index]).remove();
        }
        this.cacheDomflags();
        return this.calibrateIndexes();
      };

      WatchDOMFlags.prototype.setupDomObserver = function() {
        var config, observer;
        observer = new MutationObserver((function(_this) {
          return function(mutations) {
            var addedNodes, childrenArray, deletedNodes, item, key, mutation, newNodes, node, nodeChange, removedNodes, value, _i, _j, _len, _len1, _ref, _ref1;
            newNodes = [];
            deletedNodes = [];
            for (_i = 0, _len = mutations.length; _i < _len; _i++) {
              mutation = mutations[_i];
              console.log(mutation);
              if (mutation.type === "childList") {
                addedNodes = {
                  mutation: mutation.addedNodes,
                  panelArray: newNodes
                };
                removedNodes = {
                  mutation: mutation.removedNodes,
                  panelArray: deletedNodes
                };
                nodeChange = (function() {
                  switch (false) {
                    case !(addedNodes.mutation.length > 0):
                      return addedNodes;
                    case !(removedNodes.mutation.length > 0):
                      return removedNodes;
                    default:
                      return void 0;
                  }
                })();
                if (nodeChange) {
                  _ref = nodeChange.mutation;
                  for (key in _ref) {
                    if (!__hasProp.call(_ref, key)) continue;
                    value = _ref[key];
                    node = nodeChange.mutation[key];
                    _ref1 = node.attributes;
                    for (key in _ref1) {
                      if (!__hasProp.call(_ref1, key)) continue;
                      value = _ref1[key];
                      if (value.name === "domflag") {
                        childrenArray = _this.nodeListToArray(node.querySelectorAll("[domflag]"));
                        nodeChange.panelArray.push(node);
                        for (_j = 0, _len1 = childrenArray.length; _j < _len1; _j++) {
                          item = childrenArray[_j];
                          nodeChange.panelArray.push(item);
                        }
                      }
                    }
                  }
                }
              } else if (mutation.type === "attributes") {
                if ((mutation.oldValue === "") || (mutation.oldValue === null)) {
                  if (mutation.target.hasAttribute('domflag')) {
                    newNodes.push(mutation.target);
                  } else {
                    deletedNodes.push(mutation.target);
                  }
                }
              }
            }
            if (deletedNodes.length > 0) {
              _this.removeNodesFromPanel(deletedNodes);
            }
            if (newNodes.length > 0) {
              return _this.addNodesToPanel(newNodes);
            }
          };
        })(this));
        config = {
          attributes: true,
          attributeFilter: ['domflag'],
          attributeOldValue: true,
          childList: true,
          subtree: true
        };
        return observer.observe(document.body, config);
      };

      return WatchDOMFlags;

    })();
    domflags = document.querySelectorAll('[domflag]');
    return new WatchDOMFlags(domflags);
  });

}).call(this);
